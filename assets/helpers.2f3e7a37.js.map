{"version":3,"file":"helpers.2f3e7a37.js","sources":["../../../hoppscotch-common/src/helpers/backend/helpers.ts"],"sourcesContent":["import * as A from \"fp-ts/Array\"\nimport * as E from \"fp-ts/Either\"\nimport * as TE from \"fp-ts/TaskEither\"\nimport { pipe, flow } from \"fp-ts/function\"\nimport {\n  HoppCollection,\n  HoppRESTRequest,\n  makeCollection,\n  translateToNewRequest,\n} from \"@hoppscotch/data\"\nimport { TeamCollection } from \"../teams/TeamCollection\"\nimport { TeamRequest } from \"../teams/TeamRequest\"\nimport { GQLError, runGQLQuery } from \"./GQLClient\"\nimport {\n  ExportAsJsonDocument,\n  GetCollectionChildrenIDsDocument,\n  GetCollectionRequestsDocument,\n  GetCollectionTitleDocument,\n} from \"./graphql\"\n\nexport const BACKEND_PAGE_SIZE = 10\n\nconst getCollectionChildrenIDs = async (collID: string) => {\n  const collsList: string[] = []\n\n  while (true) {\n    const data = await runGQLQuery({\n      query: GetCollectionChildrenIDsDocument,\n      variables: {\n        collectionID: collID,\n        cursor:\n          collsList.length > 0 ? collsList[collsList.length - 1] : undefined,\n      },\n    })\n\n    if (E.isLeft(data)) {\n      return E.left(data.left)\n    }\n\n    collsList.push(...data.right.collection!.children.map((x) => x.id))\n\n    if (data.right.collection!.children.length !== BACKEND_PAGE_SIZE) break\n  }\n\n  return E.right(collsList)\n}\n\nconst getCollectionRequests = async (collID: string) => {\n  const reqList: TeamRequest[] = []\n\n  while (true) {\n    const data = await runGQLQuery({\n      query: GetCollectionRequestsDocument,\n      variables: {\n        collectionID: collID,\n        cursor: reqList.length > 0 ? reqList[reqList.length - 1].id : undefined,\n      },\n    })\n\n    if (E.isLeft(data)) {\n      return E.left(data.left)\n    }\n\n    reqList.push(\n      ...data.right.requestsInCollection.map(\n        (x) =>\n          <TeamRequest>{\n            id: x.id,\n            request: translateToNewRequest(JSON.parse(x.request)),\n            collectionID: collID,\n            title: x.title,\n          }\n      )\n    )\n\n    if (data.right.requestsInCollection.length !== BACKEND_PAGE_SIZE) break\n  }\n\n  return E.right(reqList)\n}\n\nexport const getCompleteCollectionTree = (\n  collID: string\n): TE.TaskEither<GQLError<string>, TeamCollection> =>\n  pipe(\n    TE.Do,\n\n    TE.bind(\"title\", () =>\n      pipe(\n        () =>\n          runGQLQuery({\n            query: GetCollectionTitleDocument,\n            variables: {\n              collectionID: collID,\n            },\n          }),\n        TE.map((x) => x.collection!.title)\n      )\n    ),\n    TE.bind(\"children\", () =>\n      pipe(\n        // TaskEither -> () => Promise<Either>\n        () => getCollectionChildrenIDs(collID),\n        TE.chain(flow(A.map(getCompleteCollectionTree), TE.sequenceArray))\n      )\n    ),\n\n    TE.bind(\"requests\", () => () => getCollectionRequests(collID)),\n\n    TE.map(\n      ({ title, children, requests }) =>\n        <TeamCollection>{\n          id: collID,\n          children,\n          requests,\n          title,\n        }\n    )\n  )\n\nexport const teamCollToHoppRESTColl = (\n  coll: TeamCollection\n): HoppCollection<HoppRESTRequest> =>\n  makeCollection({\n    name: coll.title,\n    folders: coll.children?.map(teamCollToHoppRESTColl) ?? [],\n    requests: coll.requests?.map((x) => x.request) ?? [],\n  })\n\n/**\n * Get the JSON string of all the collection of the specified team\n * @param teamID - ID of the team\n * @returns Either of the JSON string of the collection or the error\n */\nexport const getTeamCollectionJSON = async (teamID: string) => {\n  const data = await runGQLQuery({\n    query: ExportAsJsonDocument,\n    variables: {\n      teamID,\n    },\n  })\n\n  if (E.isLeft(data)) {\n    return E.left(data.left)\n  }\n\n  return E.right(data.right)\n}\n"],"names":["BACKEND_PAGE_SIZE","getCollectionChildrenIDs","collID","collsList","data","runGQLQuery","GetCollectionChildrenIDsDocument","E.isLeft","E.left","x","E.right","getCollectionRequests","reqList","GetCollectionRequestsDocument","translateToNewRequest","getCompleteCollectionTree","pipe","TE.Do","TE.bind","GetCollectionTitleDocument","TE.map","TE.chain","flow","A.map","TE.sequenceArray","title","children","requests","teamCollToHoppRESTColl","coll","makeCollection","_b","_a","_d","_c","getTeamCollectionJSON","teamID","ExportAsJsonDocument"],"mappings":"gLAoBO,MAAMA,EAAoB,GAE3BC,EAA2B,MAAOC,GAAmB,CACzD,MAAMC,EAAsB,CAAA,EAE5B,OAAa,CACL,MAAAC,EAAO,MAAMC,EAAY,CAC7B,MAAOC,EACP,UAAW,CACT,aAAcJ,EACd,OACEC,EAAU,OAAS,EAAIA,EAAUA,EAAU,OAAS,GAAK,MAC7D,CAAA,CACD,EAEG,GAAAI,EAASH,CAAI,EACR,OAAAI,EAAOJ,EAAK,IAAI,EAKzB,GAFUD,EAAA,KAAK,GAAGC,EAAK,MAAM,WAAY,SAAS,IAAKK,GAAMA,EAAE,EAAE,CAAC,EAE9DL,EAAK,MAAM,WAAY,SAAS,SAAWJ,EAAmB,KACpE,CAEO,OAAAU,EAAQP,CAAS,CAC1B,EAEMQ,EAAwB,MAAOT,GAAmB,CACtD,MAAMU,EAAyB,CAAA,EAE/B,OAAa,CACL,MAAAR,EAAO,MAAMC,EAAY,CAC7B,MAAOQ,EACP,UAAW,CACT,aAAcX,EACd,OAAQU,EAAQ,OAAS,EAAIA,EAAQA,EAAQ,OAAS,GAAG,GAAK,MAChE,CAAA,CACD,EAEG,GAAAL,EAASH,CAAI,EACR,OAAAI,EAAOJ,EAAK,IAAI,EAerB,GAZIQ,EAAA,KACN,GAAGR,EAAK,MAAM,qBAAqB,IAChCK,IACc,CACX,GAAIA,EAAE,GACN,QAASK,EAAsB,KAAK,MAAML,EAAE,OAAO,CAAC,EACpD,aAAcP,EACd,MAAOO,EAAE,KAAA,EAEf,CAAA,EAGEL,EAAK,MAAM,qBAAqB,SAAWJ,EAAmB,KACpE,CAEO,OAAAU,EAAQE,CAAO,CACxB,EAEaG,EACXb,GAEAc,EACEC,EAEAC,EAAQ,QAAS,IACfF,EACE,IACEX,EAAY,CACV,MAAOc,EACP,UAAW,CACT,aAAcjB,CAChB,CAAA,CACD,EACHkB,EAAQX,GAAMA,EAAE,WAAY,KAAK,CACnC,CACF,EACAS,EAAQ,WAAY,IAClBF,EAEE,IAAMf,EAAyBC,CAAM,EACrCmB,EAASC,EAAKC,EAAMR,CAAyB,EAAGS,CAAgB,CAAC,CACnE,CACF,EAEAN,EAAQ,WAAY,IAAM,IAAMP,EAAsBT,CAAM,CAAC,EAE7DkB,EACE,CAAC,CAAE,MAAAK,EAAO,SAAAC,EAAU,SAAAC,MACF,CACd,GAAIzB,EACJ,SAAAwB,EACA,SAAAC,EACA,MAAAF,CAAA,EAEN,CACF,EAEWG,EACXC,GAAA,aAEAC,OAAAA,EAAe,CACb,KAAMD,EAAK,MACX,SAASE,GAAAC,EAAAH,EAAK,WAAL,YAAAG,EAAe,IAAIJ,KAAnB,KAAAG,EAA8C,CAAC,EACxD,UAAUE,GAAAC,EAAAL,EAAK,WAAL,YAAAK,EAAe,IAAKzB,GAAMA,EAAE,WAA5B,KAAAwB,EAAwC,CAAC,CACrD,CAAC,GAOUE,EAAwB,MAAOC,GAAmB,CACvD,MAAAhC,EAAO,MAAMC,EAAY,CAC7B,MAAOgC,EACP,UAAW,CACT,OAAAD,CACF,CAAA,CACD,EAEG,OAAA7B,EAASH,CAAI,EACRI,EAAOJ,EAAK,IAAI,EAGlBM,EAAQN,EAAK,KAAK,CAC3B"}